(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : (A : Set) → A → A ?1 : (A B : Set) → A → (A → B) → B ?2 : (A B : Set) → A ∧ B → B ∧ A ?3 : (A B C : Set) → (A ∧ B) ∧ C → A ∧ (B ∧ C) ?4 : C ?5 : B ∨ A ?6 : A ∨ (B ∨ C) ?7 : A ?8 : (A : Set) → A → ¬ (¬ A) ?9 : (A : Set) → ¬ (¬ (¬ A)) → ¬ A ?10 : ((A : Set) → ¬ (¬ A) → A) → (A : Set) → A ∨ ¬ A ?11 : ((A : Set) → A ∨ ¬ A) → (A : Set) → ¬ (¬ A) → A ?12 : ((x : X) → P x ∧ Q x) → ((x : X) → P x) ∧ ((x : X) → Q x) ?13 : ((x : X) → P x) ∧ ((x : X) → Q x) → (x : X) → P x ∧ Q x ?14 : X → Σ X (λ x → ⊤) ?15 : Σ (X → X) (λ x → ⊤) ?16 : Σ (X → X) (λ f → (x : X) → P (f x) → P x) ?17 : Σ A (λ x → Drink x → Π A Drink) " nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h0 = λ A z → z")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h1 = λ A B z z₁ → z₁ z")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h2 = λ A B z → ∧-i (_∧_.snd z) (_∧_.fst z)")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h3 = λ A B C z → ∧-i (_∧_.fst (_∧_.fst z)) (∧-i (_∧_.snd (_∧_.fst z)) (_∧_.snd z))")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h8 = λ A z z₁ → z₁ z")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h9 = λ A z z₁ → z (λ z₂ → z₂ z₁)")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h10 = λ z A → z (A ∨ ¬ A) (λ z₁ → z₁ (∨-i₂ (λ z₂ → z₁ (∨-i₁ z₂))))")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h12 = λ z → ∧-i (λ x → _∧_.fst (z x)) (λ x → _∧_.snd (z x))")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h13 = λ z A → ∧-i (_∧_.fst z A) (_∧_.snd z A)")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h14 = λ x → Σ-i x (record {})")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h15 = Σ-i (λ z → z) (record {})")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
((last . 2) . (agda2-make-case-action '("h16 = Σ-i (λ z → z) (λ x z → z)")))
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
(agda2-status-action "")
(agda2-info-action "*Auto*" "No solution found" nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))
